#include<stdio.h>
#include <stdlib.h>
#include <time.h>
#include <Windows.h>
#include <conio.h>

#define VERTICAL 10
#define HORIZONTAL 10

#define TRUE 1
#define FALSE 0

/*
int stage[3][10] =	 
{
	{0,1,0,0,1,1,1,0,0,0},
	{1,1,1,1,1,1,0,1,1,1},
	{0,1,1,1,0,1,1,1,0,0}
};
*/
int stage[3][10] =
{
	{0,1,9,1,0,0,0,0,0,0},
	{1,1,1,1,1,1,1,1,1,1},
	{0,0,0,1,0,0,0,0,0,0}
};

//스테이지 좌표
int stageX = 0;
int stageY = 1;

//맵의 기본 모양
int map[10][10] =
{
	{1,1,1,1,1,1,1,1,4,1},
	{7,0,0,0,0,0,0,0,0,1},
	{1,0,0,0,0,0,0,0,0,1},
	{1,0,0,0,0,0,0,0,0,1},
	{1,0,0,0,0,0,0,0,0,1},
	{1,0,0,0,0,0,0,0,0,1},
	{1,0,0,0,0,0,0,0,0,1},
	{1,0,0,0,0,0,0,0,0,1},
	{1,0,0,0,0,0,0,0,0,5},
	{1,6,1,1,1,1,1,1,1,1},	
};
int i, j;

int playerX = 5;
int playerY = 5;

int key = FALSE;
int keyX;
int keyY;

int trapX;
int trapY;

int stopcounter = FALSE;
int gameover = FALSE;

void mapf();
void player_to_map();	//기본적인 맵표시

void start();					//시작시 행동
int randomf();					//랜덤난수 생성

int moving();					//움직임
void movecheck();			//움직임후처리

void mapupdate();			//맵 위치에 맞는 맵을 로딩

void mapup();					//맵 이동 함수
void mapdown();
void mapleft();
void mapright();

void keymake();				//열쇠제작
void trapmake();			//즉사장판제작

void test1();


void main(){test1();}


int randomf()
{
	srand(time(NULL));
	int random = 0;
	random = rand();
	//printf("%d\n",random);
	return random;
}

void mapf()		
{
	system("cls");
	for (i = 0; i < VERTICAL; i++)
	{
		for (j = 0; j < HORIZONTAL; j++)
		{
			if (map[i][j] == 0)
			{
				printf("□");
			}
			else if (map[i][j] == 1)
			{
				printf("■");
			}
			else if (map[i][j] == 2)
			{
				printf("※");
			}
			else if (map[i][j] == 3)
			{
				if (key == FALSE)
				{
					printf("☆");
				}
				else if(key == TRUE)
				{
					printf("★");
				}
			}
			else if (map[i][j] == 4)
			{
				printf("↑");
			}
			else if (map[i][j] == 5)
			{
				printf("→");
			}
			else if (map[i][j] == 6)
			{
				printf("↓");
			}
			else if (map[i][j] == 7)
			{
				printf("←");
			}
			else if (map[i][j] == 10)
			{
				printf("×");
			}
		}
		printf("\n");
	}
}

void player_to_map()
{
	map[playerY][playerX] = 3;
}

void start()//맵바꿀때 쓰는 함수
{
	mapupdate();
	player_to_map();
	keymake();
	if (map[trapY][trapX] == 10)
	{
		map[trapY][trapX] = 0;
	}
	trapmake();
	mapf();
}

//움직인 곳에 있는 옵젝값 리턴
int moving()
{
	char mchecker;
	mchecker = _getch();
	if (mchecker == -32)
	{
		mchecker = _getch();
		map[playerY][playerX] = 0;
		if (mchecker == 75)//왼쪽
		{
			if (playerX > 0)
			{
				if (map[playerY][playerX - 1] == 0)
				{
					playerX--;
					player_to_map();
					mapf();
					return 0;
				}
				else if (map[playerY][playerX - 1] == 1)
				{
					player_to_map();
					mapf();
					return 1;
				}
				else if (map[playerY][playerX - 1] == 2)
				{
					playerX--;
					player_to_map();
					return 2;
				}
				//좌향문
				else if (map[playerY][playerX - 1] == 7)
				{
					return 7;
				}
				//즉사장판
				else if (map[playerY][playerX - 1] == 10)
				{
					return 10;
				}
			}
		}
		else if (mchecker == 80)//아래
		{
			if (playerY < 9)
			{
				if (map[playerY+1][playerX] == 0)
				{
					playerY++;
					player_to_map();
					mapf();
					return 0;
				}
				else if (map[playerY+1][playerX] == 1)
				{
					player_to_map();
					mapf();
					return 1;
				}
				else if (map[playerY+1][playerX] == 2)
				{
					playerY++;
					player_to_map();
					return 2;
				}
				//하향문
				else if (map[playerY+1][playerX] == 6)
				{
					return 6;
				}
				//즉사장판
				else if (map[playerY + 1][playerX] == 10)
				{
					return 10;
				}
			}
		}
		else if (mchecker == 77)//오른쪽
		{
			if (playerX < 9)
			{
				if (map[playerY][playerX + 1] == 0)
				{
					playerX++;
					player_to_map();
					mapf();
					return 0;
				}
				else if (map[playerY][playerX + 1] == 1)
				{
					player_to_map();
					mapf();
					return 1;
				}
				else if (map[playerY][playerX + 1] == 2)
				{
					playerX++;
					player_to_map();
					return 2;
				}
				//우향문
				else if (map[playerY][playerX + 1] == 5)
				{
					return 5;
				}
				//즉사장판
				else if (map[playerY][playerX + 1] == 10)
				{
					return 10;
				}
			}
		}
		else if (mchecker == 72)//위
		{
			if (playerY > 0)
			{
				if (map[playerY - 1][playerX] == 0)
				{
					playerY--;
					player_to_map();
					mapf();
					return 0;
				}
				else if (map[playerY - 1][playerX] == 1)
				{
					player_to_map();
					mapf();
					return 1;
				}
				else if (map[playerY - 1][playerX] == 2)
				{
					playerY--;
					player_to_map();
					return 2;
				}
				//상향문
				else if (map[playerY - 1][playerX] == 4)
				{
					return 4;
				}
				//즉사장판
				else if (map[playerY - 1][playerX] == 10)
				{
					return 10;
				}
			}
		}
	}
	else if (mchecker == 27)
	{
	stopcounter = TRUE;
	}
	else
	{
		return 0;
	}
	return 0;
}

//함수 불러서 처리
void movecheck()
{
	switch (moving())
	{
	case 2:
		key = TRUE;
		mapf();
		break;
	case 4:
		if (key == TRUE)
		mapup();
		break;
	case 5:
		if (key==TRUE)
		mapright();
		break;
	case 6:
		if (key==TRUE)
		mapdown();
		break;
	case 7:
		if(key==TRUE)
		mapleft();
		break;
	case 10:
		gameover = TRUE;
		break;
	}
}

void mapupdate()
{
	key = FALSE;
	for (i = 0; i < HORIZONTAL; i++)
	{
		map[i][0] = 1;
		map[i][9] = 1;
		map[0][i] = 1;
		map[9][i] = 1;
	}
	//2번쨰줄들 다 고쳐
	if ((stage[stageY][stageX] == 1))
	{
		if ((stage[stageY - 1][stageX] == 1) && (stageY > 0))//상향문 
		{
			map[0][8] = 4;
		}
		if ((stage[stageY - 1][stageX] == 6) || (stage[stageY - 1][stageX] == 8) || (stage[stageY - 1][stageX] == 10) || (stage[stageY - 1][stageX] == 11) || (stage[stageY - 1][stageX] == 13) || (stage[stageY - 1][stageX] == 14) || (stage[stageY - 1][stageX] == 15) && (stageY > 0))
		{
			map[0][8] = 4;
		}
		if ((stage[stageY][stageX + 1] == 1) && (stageX < 9))//우향문
		{
			map[8][9] = 5;
		}
		if ((stage[stageY][stageX + 1] == 5) || (stage[stageY][stageX + 1] == 8) || (stage[stageY][stageX + 1] == 9) || (stage[stageY][stageX + 1] == 11) || (stage[stageY][stageX + 1] == 12) || (stage[stageY][stageX + 1] == 14) || (stage[stageY][stageX + 1] == 15) && (stageX < 9))
		{
			map[8][9] = 5;
		}
		if ((stage[stageY + 1][stageX] == 1) && (stageY < 2))//하향문
		{
			map[9][1] = 6;
		}
		if ((stage[stageY + 1][stageX] == 5) || (stage[stageY + 1][stageX] == 6) || (stage[stageY + 1][stageX] == 7) || (stage[stageY + 1][stageX] == 11) || (stage[stageY + 1][stageX] == 12) || (stage[stageY + 1][stageX] == 13) || (stage[stageY + 1][stageX] == 15) && (stageY < 2))
		{
			map[9][1] = 6;
		}
		if ((stage[stageY][stageX - 1] == 1) && (stageX > 0))//좌향문
		{
			map[1][0] = 7;
		}
		if ((stage[stageY][stageX - 1] == 7) || (stage[stageY][stageX - 1] == 9) || (stage[stageY][stageX - 1] == 10) || (stage[stageY][stageX - 1] == 12) || (stage[stageY][stageX - 1] == 13) || (stage[stageY][stageX - 1] == 14) || (stage[stageY][stageX - 1] == 15) && (stageX > 0))
		{
			map[1][0] = 7;
		}
	}
	switch (stage[stageY][stageX])
	{
	case 5:
		map[0][8] = 4;
		map[8][9] = 5;
		break;
	case 6:
		map[0][8] = 4;
		map[9][1] = 6;
		break;
	case 7:
		map[0][8] = 4;
		map[1][0] = 7;
		break;
	case 8:
		map[8][9] = 5;
		map[9][1] = 6;
		break;
	case 9:
		map[8][9] = 5;
		map[1][0] = 7;
		break;
	case 10:
		map[9][1] = 6;
		map[1][0] = 7;
		break;
	case 11:
		map[0][8] = 4;
		map[8][9] = 5;
		map[9][1] = 6;
		break;
	case 12:
		map[0][8] = 4;
		map[8][9] = 5;
		map[1][0] = 7;
		break;
	case 13:
		map[0][8] = 4;
		map[9][1] = 6;
		map[1][0] = 7;
		break;
	case 14:
		map[8][9] = 5;
		map[9][1] = 6;
		map[1][0] = 7;
		break;
	case 15:
		map[0][8] = 4;
		map[8][9] = 5;
		map[9][1] = 6;
		map[1][0] = 7;
		break;
	default:
		break;
	}
}

void mapup()
{
	map[playerY][playerX] = 0;
	stageY--;
	playerX = 1;
	playerY = 8;
	start();
}
void mapright()
{
	map[playerY][playerX] = 0;
	stageX++;
	playerX = 1;
	playerY = 1;
	start();
}
void mapdown()
{
	map[playerY][playerX] = 0;
	stageY++;
	playerX = 8;
	playerY = 1;
	start();
}
void mapleft()
{
	map[playerY][playerX] = 0;
	stageX--;
	playerX = 8;
	playerY = 8;
	start();
}



void keymake()
{
	while (1)
	{
		keyX = randomf() % 8 + 1;
		keyY = randomf() % 8 + 1;
		if (map[keyY][keyX] == 0)
		{
			map[keyY][keyX] = 2;
			break;
		}
	}
} 

void trapmake()
{
	while (1)
	{
		trapX = randomf() % 8 + 1;
		trapY = randomf() % 8 + 1;
		if (map[trapY][trapX] == 0 && map[trapY - 1][trapX] != 4 && map[trapY][trapX + 1] != 5 && map[trapY + 1][trapX] != 6 && map[trapY][trapX - 1] != 7)
		{
			map[trapY][trapX] = 10;
			break;
		}
	}
}

void test1()
{
	start();
	while (gameover == FALSE)
	{
		while (stopcounter == FALSE && gameover == FALSE)
		{
			movecheck();
		}
		if (stopcounter == TRUE)
		{
			system("cls");
			printf("pause");
			char mch;
			while (stopcounter == TRUE)
			{
				mch = _getch();
				if (mch == 27)
				{
					stopcounter = FALSE;
					mapf();
				}
			}
		}
	}
	system("cls");
	printf("gameover");
	return;
}
